import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import chalk from 'chalk';
import cfonts from 'cfonts';
import { config } from 'dotenv';
import dbManager from './config/database.js';
import { botConfig, validateConfig } from './config/bot-config.js';
import ShadowBot from './bot.js';

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
config();

const __dirname = dirname(fileURLToPath(import.meta.url));

// ุนุฑุถ ุดุนุงุฑ ุดุงุฏู
function displayLogo() {
    console.clear();
    
    cfonts.say('SHADOW', {
        font: 'block',
        align: 'center',
        colors: ['red', 'black'],
        background: 'transparent',
        letterSpacing: 1,
        lineHeight: 1,
        space: true,
        maxLength: '0',
        gradient: ['red', 'black'],
        independentGradient: false,
        transitionGradient: true,
        env: 'node'
    });

    cfonts.say('ุงูุฐู ูู ุญุฏููุฉ ุงูุธู', {
        font: 'console',
        align: 'center',
        colors: ['red'],
        background: 'transparent',
        letterSpacing: 1,
        lineHeight: 1,
        space: true,
        maxLength: '0'
    });

    console.log(chalk.red('โ'.repeat(60)));
    console.log(chalk.red('๐ ุดุงุฏู - ุงูุฐู ูู ุญุฏููุฉ ุงูุธู'));
    console.log(chalk.gray('๐ ุชุงุฑูุฎ ุงูุจูุงุก: ' + new Date().toLocaleDateString('ar-EG')));
    console.log(chalk.red('๐จโ๐ป ูุทูุฑ ุจููุฉ ุงูุธู ูุงูุฐูุงุก ุงูุงุตุทูุงุนู'));
    console.log(chalk.red('โ'.repeat(60)));
}

// ูุญุต ุงููุธุงู
async function systemCheck() {
    console.log(chalk.blue('๐ ูุญุต ุฃูุธูุฉ ุงูุธู...'));
    
    try {
        console.log(chalk.gray('  โโ ูุญุต ุฅุนุฏุงุฏุงุช ุงูุธู...'));
        validateConfig();
        console.log(chalk.green('  โโ โ ุฅุนุฏุงุฏุงุช ุงูุธู ุตุญูุญุฉ'));
        
        console.log(chalk.gray('  โโ ูุญุต ูุงุนุฏุฉ ุจูุงูุงุช ุงูุธู...'));
        await dbManager.connect();
        const dbHealth = await dbManager.healthCheck();
        
        if (dbHealth) {
            console.log(chalk.green('  โโ โ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุธู ูุชุตูุฉ'));
            
            const dbInfo = await dbManager.getInfo();
            console.log(chalk.blue(`  โโ ๐ ุฌุฏุงูู ุงูุธู: ${dbInfo.tables.length}`));
            
            let totalRecords = 0;
            dbInfo.tables.forEach(table => {
                totalRecords += table.records;
                console.log(chalk.gray(`  โ   โโ ${table.name}: ${table.records} ุณุฌู`));
            });
            
            console.log(chalk.blue(`  โโ ๐ ุฅุฌูุงูู ุณุฌูุงุช ุงูุธู: ${totalRecords}`));
        } else {
            throw new Error('ูุดู ูุญุต ุตุญุฉ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุธู');
        }
        
        console.log(chalk.gray('  โโ ูุญุต ูุฌูุฏุงุช ุงูุธู...'));
        const requiredDirs = ['logs', 'temp', 'session', 'backups'];
        const fs = await import('fs');
        
        for (const dir of requiredDirs) {
            const dirPath = join(__dirname, dir);
            if (!fs.existsSync(dirPath)) {
                fs.mkdirSync(dirPath, { recursive: true });
                console.log(chalk.yellow(`  โ   โโ ุชู ุฅูุดุงุก ูุฌูุฏ ุงูุธู: ${dir}`));
            }
        }
        console.log(chalk.green('  โโ โ ูุฌูุฏุงุช ุงูุธู ุฌุงูุฒุฉ'));
        
        console.log(chalk.green('  โโ โ ูุญุต ุฃูุธูุฉ ุงูุธู ููุชูู'));
        
    } catch (error) {
        console.log(chalk.red('  โโ โ ูุดู ูุญุต ุฃูุธูุฉ ุงูุธู'));
        console.error(chalk.red('ุฎุทุฃ ูู ูุญุต ุงููุธุงู:'), error.message);
        process.exit(1);
    }
}

// ูุนุงูุฌ ุฅููุงู ุงูุจุฑูุงูุฌ
function setupGracefulShutdown(bot) {
    const shutdown = async (signal) => {
        console.log(chalk.yellow(`\n๐ ุชู ุงุณุชูุงู ุฅุดุงุฑุฉ ${signal}ุ ุดุงุฏู ูุบุงุฏุฑ ุญุฏููุฉ ุงูุธู...`));
        
        try {
            if (bot) {
                await bot.stop();
            }
            
            await dbManager.disconnect();
            
            console.log(chalk.green('โ ุดุงุฏู ุบุงุฏุฑ ุญุฏููุฉ ุงูุธู ุจูุฌุงุญ'));
            process.exit(0);
        } catch (error) {
            console.error(chalk.red('โ ุฎุทุฃ ูู ุฅููุงู ุดุงุฏู:'), error);
            process.exit(1);
        }
    };

    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGQUIT', () => shutdown('SIGQUIT'));
}

// ูุนุงูุฌ ุงูุฃุฎุทุงุก ุบูุฑ ุงููุชููุนุฉ
function setupErrorHandlers() {
    process.on('uncaughtException', (error) => {
        console.error(chalk.red('๐ฅ ุฎุทุฃ ุบูุฑ ูุชููุน ูู ุงูุธู:'), error);
        console.error(chalk.red('Stack trace:'), error.stack);
        process.exit(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
        console.error(chalk.red('๐ฅ ุฑูุถ ุบูุฑ ูุนุงูุฌ ูู ุงูุธู:'), promise);
        console.error(chalk.red('ุงูุณุจุจ:'), reason);
        process.exit(1);
    });
}

// ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
async function main() {
    try {
        displayLogo();
        
        setupErrorHandlers();
        
        await systemCheck();
        
        console.log(chalk.blue('\n๐ ุดุงุฏู ูุฏุฎู ุญุฏููุฉ ุงูุธู...'));
        
        const bot = new ShadowBot();
        
        setupGracefulShutdown(bot);
        
        await bot.start();
        
        console.log(chalk.green('\n๐ ุดุงุฏู ุฌุงูุฒ ูู ุญุฏููุฉ ุงูุธู!'));
        console.log(chalk.blue('๐ฑ ุดุงุฏู ูุณุชูุน ูุฃุตูุงุช ุงูุธู...'));
        
        console.log(chalk.red('\n๐ ูุนูููุงุช ุดุงุฏู:'));
        console.log(chalk.gray(`  โโ ุงูุงุณู: ${botConfig.name}`));
        console.log(chalk.gray(`  โโ ุงูุฅุตุฏุงุฑ: ${botConfig.version}`));
        console.log(chalk.gray(`  โโ ุงูุจูุฆุฉ: ${botConfig.environment}`));
        console.log(chalk.gray(`  โโ ูุงุนุฏุฉ ุจูุงูุงุช ุงูุธู: ${botConfig.database.path}`));
        
        if (botConfig.server.enabled) {
            console.log(chalk.gray(`  โโ ุฎุงุฏู ุงูุธู: http://localhost:${botConfig.server.port}`));
        }
        
        console.log(chalk.gray(`  โโ ูุนุฑู ุงูุนูููุฉ: ${process.pid}`));
        
    } catch (error) {
        console.error(chalk.red('\n๐ฅ ูุดู ุดุงุฏู ูู ุฏุฎูู ุญุฏููุฉ ุงูุธู:'), error);
        console.error(chalk.red('Stack trace:'), error.stack);
        process.exit(1);
    }
}

// ุชุดุบูู ุงูุจุฑูุงูุฌ
main().catch((error) => {
    console.error(chalk.red('๐ฅ ุฎุทุฃ ูู ุงูุจุฑูุงูุฌ ุงูุฑุฆูุณู:'), error);
    process.exit(1);
});

